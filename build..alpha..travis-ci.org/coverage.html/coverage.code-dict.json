{"/home/travis/build/npmtest/node-npmtest-verb/test.js":"/* istanbul instrument in package npmtest_verb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-verb/lib.npmtest_verb.js":"/* istanbul instrument in package npmtest_verb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_verb = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_verb = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-verb/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-verb && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_verb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_verb\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_verb.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_verb.rollup.js'] =\n            local.assetsDict['/assets.npmtest_verb.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_verb.__dirname + '/lib.npmtest_verb.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/index.js":"'use strict';\n\nvar diff = require('diff');\nvar chalk = require('chalk');\nvar extend = require('extend-shallow');\nvar Template = require('template');\nvar Composer = require('composer');\nvar vfs = require('vinyl-fs');\n\nvar stack = require('./lib/stack');\nvar init = require('./lib/init');\n\n/**\n * Initialize `Verb`\n *\n * @param {Object} `context`\n * @api private\n */\n\nfunction Verb() {\n  Template.apply(this, arguments);\n  Composer.call(this, 'verb');\n  init(this);\n}\n\nextend(Verb.prototype, Composer.prototype);\nTemplate.extend(Verb.prototype);\n\n/**\n * Set application defaults that may be overridden by the user.\n * This is a temporary method and should not be used.\n *\n * @param {String} `key`\n * @param {*} `value`\n * @api private\n */\n\nVerb.prototype.defaults = function(key/*, value*/) {\n  if (typeof key === 'object') {\n    arguments[0] = {defaults: arguments[0]};\n  } else {\n    arguments[0] = 'defaults.' + arguments[0];\n  }\n  this.option.apply(this, arguments);\n  return this;\n};\n\n/**\n * Glob patterns or filepaths to source files.\n *\n * ```js\n * verb.src('src/*.hbs', {layout: 'default'})\n * ```\n *\n * @param {String|Array} `glob` Glob patterns or file paths to source files.\n * @param {Object} `options` Options or locals to merge into the context and/or pass to `src` plugins\n * @api public\n */\n\nVerb.prototype.src = function(glob, opts) {\n  return stack.src(this, glob, opts);\n};\n\n/**\n * Specify a destination for processed files.\n *\n * ```js\n * verb.dest('dist')\n * ```\n *\n * @param {String|Function} `dest` File path or rename function.\n * @param {Object} `options` Options and locals to pass to `dest` plugins\n * @api public\n */\n\nVerb.prototype.dest = function(dest, opts) {\n  return stack.dest(this, dest, opts);\n};\n\n/**\n * Copy a `glob` of files to the specified `dest`.\n *\n * ```js\n * verb.task('assets', function() {\n *   verb.copy('assets/**', 'dist');\n * });\n * ```\n *\n * @param  {String|Array} `glob`\n * @param  {String|Function} `dest`\n * @return {Stream} Stream, to continue processing if necessary.\n * @api public\n */\n\nVerb.prototype.copy = function(glob, dest, opts) {\n  return vfs.src(glob, opts).pipe(vfs.dest(dest, opts));\n};\n\n/**\n * Display a visual representation of the difference between\n * two objects or strings.\n *\n * ```js\n * var doc = verb.views.docs['foo.md'];\n * verb.render(doc, function(err, content) {\n *   verb.diff(doc.orig, content);\n * });\n * ```\n *\n * @param {Object|String} `a`\n * @param {Object|String} `b`\n * @param {String} `methodName` Optionally pass a [jsdiff] method name to use. The default is `diffJson`\n * @api public\n */\n\nVerb.prototype.diff = function(a, b, method) {\n  method = method || 'diffJson';\n  a = a || this.env;\n  b = b || this.cache.data;\n  diff[method](a, b).forEach(function (res) {\n    var color = chalk.gray;\n    if (res.added) {\n      color = chalk.green;\n    }\n    if (res.removed) {\n      color = chalk.red;\n    }\n    process.stderr.write(color(res.value));\n  });\n  console.log('\\n');\n};\n\n/**\n * Expose `verb.Verb`\n */\n\nVerb.prototype.Verb = Verb;\n\n/**\n * Expose `verb`\n */\n\nmodule.exports = new Verb();\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/stack.js":"'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar through = require('through2');\nvar drafts = require('gulp-drafts');\nvar es = require('event-stream');\nvar vfs = require('vinyl-fs');\nvar _ = require('lodash');\nvar cache = {};\n\n/**\n * Local dependencies\n */\n\nvar plugins = require('./plugins');\n\n/**\n * Default `src` plugins to run.\n *\n * To disable a plugin:\n *\n * ```js\n * app.disable('src:foo plugin');\n * ```\n */\n\nexports.src = function(app, glob, opts) {\n  opts = _.merge({}, app.options, opts);\n  cache = opts;\n\n  return createStack(app, {\n    'src:vfs': vfs.src(glob, opts),\n    'src:init': plugins.init.call(app, opts),\n    'src:lint': plugins.lint.call(app, opts),\n    'src:conflicts': plugins.conflicts.call(app, opts),\n    'src:drafts': drafts.call(app, opts)\n  });\n};\n\n/**\n * Default `dest` plugins to run.\n *\n * To disable a plugin:\n *\n * ```js\n * app.disable('dest:bar plugin');\n * ```\n */\n\nexports.dest = function (app, dest, opts) {\n  opts = _.merge({}, app.options, cache, opts);\n  opts.locals = opts.locals || {};\n\n  return createStack(app, {\n    'dest:paths': plugins.dest.call(app, dest, opts.locals, opts),\n    'dest:render': plugins.render.call(app, opts.locals, opts),\n    'dest:reflinks': plugins.reflinks.call(app, opts.locals, opts),\n    'dest:comments': plugins.comments.call(app),\n    'dest:format': plugins.format.call(app, opts.locals, opts),\n    'dest:vfs': vfs.dest(dest, opts)\n  });\n};\n\n/**\n * Create the default plugin stack based on user settings.\n *\n * Disable a plugin by passing the name of the plugin + ` plugin`\n * to `app.disable()`,\n *\n * **Example:**\n *\n * ```js\n * app.disable('src:foo plugin');\n * app.disable('src:bar plugin');\n * ```\n */\n\nfunction createStack(app, plugins) {\n  if (app.enabled('minimal config')) {\n    return es.pipe.apply(es, []);\n  }\n  function enabled(acc, plugin, name) {\n    if (plugin == null) {\n      acc.push(through.obj());\n    }\n    if (app.enabled(name + ' plugin')) {\n      acc.push(plugin);\n    }\n    return acc;\n  }\n  var arr = _.reduce(plugins, enabled, []);\n  return es.pipe.apply(es, arr);\n}\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/plugins/index.js":"module.exports = require('export-files')(__dirname);\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/plugins/comments.js":"'use strict';\n\nvar extend = require('extend-shallow');\nvar through = require('through2');\nvar PluginError = require('plugin-error');\n\nmodule.exports = function() {\n  var opts = extend({}, this.options, this.get('argv'));\n\n  return through.obj(function (file, enc, cb) {\n    if (file.isNull()) {\n      this.push(file);\n      return cb();\n    }\n\n    try {\n      // strip code comments\n      var str = file.contents.toString();\n      str = stripHbsComments(str, opts);\n      str = stripTmplComments(str, opts);\n      str = stripHtmlComments(str, opts);\n\n      // rebuffer contents\n      file.contents = new Buffer(str);\n      this.push(file);\n      return cb();\n    } catch (err) {\n      this.emit('error', new PluginError('comments plugin', err, {stack: true}));\n      return cb();\n    }\n  });\n};\n\nfunction stripHbsComments(str, opts) {\n  return strip(str, '{{!', '}}', opts);\n}\n\nfunction stripTmplComments(str, opts) {\n  return strip(str, '{{#', '#}}', opts);\n}\n\nfunction stripHtmlComments(str, opts) {\n  str = strip(str, '<!-- strip', '-->', opts);\n  return strip(str, '<!--strip', '-->', opts);\n}\n\nfunction strip(str, lt, rt, opts) {\n  if (opts && opts.stripComments === false) return str;\n  var a = str.indexOf(lt);\n  var b = str.indexOf(rt, a);\n\n  while (a !== -1 && b !== -1) {\n    str = str.slice(0, a) + str.slice(b + rt.length);\n    a = str.indexOf(lt);\n    b = str.indexOf(rt, a);\n  }\n  return str;\n}\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/plugins/conflicts.js":"'use strict';\n\nvar PluginError = require('plugin-error');\nvar symbol = require('log-symbols');\nvar through = require('through2');\nvar yellow = require('ansi-yellow');\nvar red = require('ansi-red');\nvar _ = require('lodash');\n\nmodule.exports = function(options) {\n  var config = this.get('argv') || {};\n  options = _.extend({}, config, options);\n  var app = this;\n\n  if (config.conflicts && config.verbose) {\n    console.log();\n    console.log(yellow('Checking for conflicts…'));\n  }\n\n  return through.obj(function (file, enc, cb) {\n    if (file.isNull()) {\n      this.push(file);\n      return cb();\n    }\n\n    if (config.nocheck) {\n      this.push(file);\n      return cb();\n    }\n\n    try {\n      var str = file.contents.toString();\n      var res = helpers(str);\n      var conflicting = problematic(app, file, res, config.verbose);\n      var h = {};\n\n      if (!conflicting.length) {\n        this.push(file);\n        return cb();\n      }\n\n      var ctx = {};\n      ctx.options = _.extend({}, app.options, file.options);\n      ctx.context = file.locals || {};\n      ctx.config = app.config;\n      ctx.app = app;\n\n      file.locals = file.locals || {};\n      file.locals.__ = file.locals.__ || {};\n\n      for (var i = 0; i < conflicting.length; i++) {\n        var name = conflicting[i];\n        file.content = namespace(file.content, name);\n        var syncFn = app._.helpers.getHelper(name);\n        if (syncFn) {\n          h[name] = _.bind(syncFn, ctx);\n          file.locals.__[name] = _.bind(syncFn, ctx);\n          app.helpers({__: h});\n          delete app._.helpers[name];\n        }\n\n        var asyncFn = app._.asyncHelpers.getHelper(name);\n        if (asyncFn) {\n          h[name] = _.bind(asyncFn, ctx);\n          file.locals.__[name] = _.bind(asyncFn, ctx);\n          app.asyncHelpers({__: h});\n          delete app._.asyncHelpers[name];\n        }\n\n        if (!asyncFn && !syncFn) {\n          h[name] = noop(name);\n          file.locals.__[name] = noop(name);\n          app.helpers({__: h});\n        }\n      }\n\n      file.contents = new Buffer(file.content);\n      this.push(file);\n      return cb();\n    } catch (err) {\n      this.emit('error', new PluginError('conflicts plugin', err, {stack: true}));\n      return cb();\n    }\n  });\n};\n\nfunction noop(name) {\n  return function () {\n    var msg = '';\n    msg += 'ERROR! Cannot find the {%= ';\n    msg += name;\n    msg += '() %} helper. Helpers may be ';\n    msg += 'registered using `app.helper()`.';\n    // console.log(red(msg));\n  };\n}\n\nfunction namespace(str, name) {\n  return str.split('{%= ' + name).join('{%= __.' + name);\n}\n\nfunction helpers(str) {\n  var re = /\\{%=\\s*((?!__\\.)[\\w.]+)(?:\\(\\)|\\(([^)]*?)\\))\\s*%}/gm;\n  var res = [],\n    match;\n\n  while (match = re.exec(str)) {\n    if (res.indexOf(match[1]) === -1) {\n      res.push(match[1].trim());\n    }\n  }\n  return res;\n}\n\nfunction problematic(app, file, helpers, verbose) {\n  var dataKeys = Object.keys(app.cache.data);\n  dataKeys = _.union(dataKeys, Object.keys(file.data));\n  var registered = Object.keys(app._.asyncHelpers);\n  registered = _.union(registered, Object.keys(app._.helpers));\n\n  var h = [],\n    d = [];\n  var len = helpers.length;\n\n  while (len--) {\n    var helper = helpers[len];\n    // if the helper name is also a data prop, it's a conflict\n    if (dataKeys.indexOf(helper) !== -1 && helper.indexOf('.') === -1) {\n      d.push(helper);\n    }\n\n    // if the helper is not registered, it's a conflict\n    if (registered.indexOf(helper) === -1 && helper.indexOf('.') === -1) {\n      h.push(helper);\n    }\n  }\n\n  message(h, d, verbose, file);\n  return _.union(h, d);\n}\n\nfunction message(h, d, verbose, file) {\n  if (!verbose) return;\n  var fp = file.path.split(/[\\\\\\/]/).slice(-2).join('/');\n\n  var hlen = h.length;\n  var dlen = d.length;\n\n  if (hlen > 0) {\n    console.log(symbol.error, '', red(hlen + ' missing helper' + s(hlen) + ' found in', fp));\n    h.forEach(function (ele) {\n      console.log('   -', ele);\n    });\n    console.log();\n  }\n\n  if (dlen > 0) {\n    console.log(symbol.warning, '', yellow(dlen + ' data/helper conflict' + s(dlen) + ' found in', fp));\n    d.forEach(function (ele) {\n      console.log('   -', ele);\n    });\n    console.log();\n  }\n}\n\nfunction s(len) {\n  return len > 1 ? 's' : '';\n}\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/plugins/dest.js":"'use strict';\n\nvar path = require('path');\nvar through = require('through2');\nvar PluginError = require('plugin-error');\nvar utils = require('../utils');\n\n/**\n * Add dest properties to `file.data`\n */\n\nmodule.exports = function destPlugin(destDir) {\n  return through.obj(function (file, enc, cb) {\n    if (file.isNull()) {\n      this.push(file);\n      return cb();\n    }\n\n    try {\n      var dest = file.data.dest || {};\n      if (typeof destDir === 'function') {\n        dest.dirname = destDir(file);\n      } else if (typeof destDir === 'string') {\n        dest.dirname = path.resolve(destDir);\n      } else {\n        dest.dirname = path.dirname(file.path);\n      }\n\n      dest.cwd = file.cwd;\n      dest.base = file.base;\n      dest.relative = file.relative;\n      dest.extname = path.extname(file.relative);\n      dest.basename = path.basename(file.relative);\n      dest.filename = utils.basename(dest.basename, dest.extname);\n      dest.path = path.join(dest.dirname, dest.basename);\n\n      file.data.__filename = dest.path;\n      file.data.__dirname = dest.dirname;\n      file.data.dest = dest;\n\n      this.push(file);\n      return cb();\n    } catch (err) {\n      this.emit('error', new PluginError('dest plugin', err, {stack: true}));\n      return cb();\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/utils/index.js":"'use strict';\n\n/**\n * Module dependencies\n */\n\nvar path = require('path');\nvar mdu = require('markdown-utils');\nvar mm = require('micromatch');\n\n/**\n * Expose `utils`\n */\n\nvar utils = require('export-files')(__dirname);\n\n/**\n * File cache\n */\n\nvar cache = {};\n\n/**\n * Create a url from the given `domain`, optionally pass `true`\n * as the second argument to use `https` as the protocol.\n *\n * @param  {String} `domain`\n * @param  {String} `https`\n * @return {String}\n */\n\nutils.linkify = function linkify(domain, https) {\n  return function (author) {\n    if (typeof author !== 'object') {\n      throw new TypeError('utils.linkify expects author to be an object.');\n    }\n\n    var username = author.username;\n    if (typeof username === 'undefined') {\n      username = this.context[domain] && this.context[domain].username;\n    }\n\n    if (typeof username === 'undefined') {\n      username = this.config.get(domain + '.username');\n    }\n\n    if (typeof username === 'object') {\n      var o = username;\n      username = o.username;\n    }\n\n    if (!username) return '';\n\n    var protocol = https ? 'https://' : 'http://';\n    var res = mdu.link(domain + '/' + username, protocol + domain + '.com/' + username);\n    return '+ ' + res;\n  };\n};\n\n/**\n * Returns a matching function to use against\n * the list of given files.\n *\n * @param {Array} `files` The list of files to match against.\n * @return {Array} Array of matching files\n */\n\nutils.files = function files(arr) {\n  return function(pattern, options) {\n    return mm(arr, pattern, options);\n  };\n};\n\n/**\n * Try to require a file, fail silently. Encapsulating try-catches\n * also helps with v8 optimizations.\n */\n\nutils.tryRequire = function tryRequire(fp) {\n  if (typeof fp !== 'string') {\n    throw new Error('utils.tryRequire() expects a string.');\n  }\n  var key = 'tryRequire:' + fp;\n  if (cache.hasOwnProperty(key)) return cache[key];\n  try {\n    return (cache[key] = require(fp));\n  } catch(err) {}\n  try {\n    return (cache[key] = require(path.resolve(fp)));\n  } catch(err) {}\n  return null;\n};\n\n/**\n * Get the basename of a file path, excluding extension.\n *\n * @param {String} `fp`\n * @param {String} `ext` Optionally pass the extension.\n */\n\nutils.basename = function basename(fp, ext) {\n  if (typeof fp === 'undefined') {\n    throw new Error('utils.basename() expects a string.');\n  }\n  return fp.substr(0, fp.length - (ext || path.extname(fp)).length);\n};\n\n/**\n * Ensure that a file extension is formatted properly.\n *\n * @param {String} `ext`\n */\n\nutils.formatExt = function formatExt(ext) {\n  // could be filepath with no ext, e.g. `LICENSE`\n  if (typeof ext === 'undefined') return;\n  if (Array.isArray(ext)) return ext.map(utils.formatExt);\n  if (ext.charAt(0) !== '.') ext = '.' + ext;\n  return ext;\n};\n\n/**\n * Cast `val` to an array.\n */\n\nutils.arrayify = function arrayify(val) {\n  var isArray = Array.isArray(val);\n  if (typeof val !== 'string' && !isArray) {\n    throw new Error('utils.arrayify() expects a string or array.');\n  }\n  return isArray ? val : [val];\n};\n\n/**\n * Detect if the user has specfied not to render a file.\n */\n\nutils.norender = function norender(verb, file, locals) {\n  var ext = file && file.ext ? utils.formatExt(ext) : null;\n  if (ext && !verb.engines.hasOwnProperty(ext)) {\n    return false;\n  }\n\n  return verb.isTrue('norender') || verb.isFalse('render')\n    || file.norender === true    || file.render === false\n    || locals.norender === true  || locals.render === false;\n};\n\n/**\n * Expose `utils`\n */\n\nmodule.exports = utils;\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/utils/defaultIgnores.js":"'use strict';\n\nmodule.exports = [\n  '*.DS_Store',\n  '.git',\n  'bower_components',\n  'node_modules',\n  'npm-debug.log',\n  'actual',\n  'fixtures',\n  'test/actual',\n  'test/fixtures',\n  'temp',\n  'tmp',\n  'vendor',\n  'wip'\n];\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/plugins/format.js":"'use strict';\n\nvar through = require('through2');\nvar Remarkable = require('remarkable');\nvar PluginError = require('plugin-error');\nvar prettify = require('pretty-remarkable');\nvar extend = require('extend-shallow');\n\n\nmodule.exports = function(locals) {\n  var argv = this.get('argv');\n  var app = this;\n\n  // add a trailing newline to docs?\n  var newline = argv.newline || this.config.get('newline');\n\n  return through.obj(function (file, enc, cb) {\n    if (file.isNull()) {\n      this.push(file);\n      return cb();\n    }\n\n    try {\n      if (file.path.indexOf('README.md') === -1 || noformat(app, file, locals, argv)) {\n        this.push(file);\n        return cb();\n      }\n\n      // pass some extra formatting info to `pretty-remarkable`\n      var opts = extend({}, locals, file.options);\n      opts.username = app.get('data.username');\n      opts.name = app.get('data.author.name');\n\n      // prettify\n      var str = pretty(file.contents.toString(), opts);\n      str = str.trim() + (newline ? '\\n' : '');\n      str = fixList(str);\n\n      // rebuffer contents\n      file.contents = new Buffer(str);\n      this.push(file);\n      return cb();\n    } catch(err) {\n      this.emit('error', new PluginError('formatter plugin', err, {stack: true}));\n      return cb();\n    }\n  });\n};\n\n/**\n * Fix list formatting\n */\n\nfunction fixList(str) {\n  str = str.replace(/([ ]{1,4}[+-] \\[?[^)]+\\)?)\\n\\n\\* /gm, '$1\\n* ');\n  str = str.split('__{_}_*').join('**{*}**');\n  return str;\n}\n\n/**\n * Instantiate `Remarkable` and use the `prettify` plugin\n * on the given `str`.\n *\n * @param  {String} `str`\n * @param  {Object} `options`\n * @return {String}\n */\n\nfunction pretty(str, options) {\n  return new Remarkable(options)\n    .use(prettify)\n    .render(str);\n}\n\n/**\n * Push the `file` through if the user has specfied\n * not to format it.\n */\n\nfunction noformat(app, file, locals, argv) {\n  return app.isTrue('noformat') || app.isFalse('format')\n    || file.noformat === true || file.format === false\n    || locals.noformat === true || locals.format === false\n    || argv.noformat === true || argv.format === false;\n}\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/plugins/init.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar PluginError = gutil.PluginError;\nvar through = require('through2');\n\nmodule.exports = function () {\n  var app = this;\n\n  return through.obj(function (file, enc, cb) {\n    if (file.isNull()) {\n      this.push(file);\n      return cb();\n    }\n    if (file.isStream()) {\n      this.emit('error', new PluginError('init plugin', 'Streaming is not supported.'));\n      return cb();\n    }\n\n    try {\n      var stream = this;\n      file.content = file.contents.toString();\n      app.handle('onLoad', file, function (err) {\n        if (err) {\n          stream.emit('error', new PluginError('renderFile', err, {stack: true}));\n          cb(err);\n          return;\n        }\n      });\n      this.push(file);\n      cb();\n    } catch (err) {\n      this.emit('error', new PluginError('init plugin', err, {stack: true}));\n      cb();\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/plugins/lint.js":"'use strict';\n\nvar PluginError = require('plugin-error');\nvar lint = require('lint-templates');\nvar through = require('through2');\n\nmodule.exports = function(options) {\n  var app = this;\n  return through.obj(function (file, enc, cb) {\n    try {\n      lint(app, file);\n      this.push(file);\n      return cb();\n    } catch(err) {\n      this.emit('error', new PluginError('lint plugin', err, {stack: true}));\n      return cb();\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/plugins/reflinks.js":"'use strict';\n\nvar through = require('through2');\nvar PluginError = require('plugin-error');\nvar reflinks = require('helper-reflinks');\nvar extend = require('extend-shallow');\nvar isTrue = require('is-true');\n\n/**\n * Expose `reflinks` plugin\n */\n\nmodule.exports = function(options) {\n  options = options || {};\n  var config = this.config && this.config.get('reflinks') || {};\n  var argv = this.get('argv');\n  var app = this;\n\n  return through.obj(function (file, enc, cb) {\n    if (file.isNull()) {\n      this.push(file);\n      return cb();\n    }\n\n    var disabled = !enabled(app, file, options, argv, config);\n    if (disabled || !config) {\n      this.push(file);\n      return cb();\n    }\n\n    try {\n      app.union('reflinks', file.data.reflinks || []);\n      var list = app.get('reflinks') || [];\n\n      if (!list || !list.length) {\n        this.push(file);\n        return cb();\n      }\n\n      var stream = this;\n      var str = file.contents.toString();\n\n      reflinks(list, function (err, res) {\n        if (err) {\n          stream.emit('error', new PluginError('reflinks plugin', err));\n          return cb();\n        }\n\n        file.contents = new Buffer(str + '\\n' + res);\n        stream.push(file);\n        return cb();\n      });\n\n    } catch (err) {\n      this.emit('error', new PluginError('reflinks plugin', err));\n      return cb();\n    }\n  });\n};\n\n/**\n * Push the `file` through if the user has specfied\n * not to generate reflinks.\n */\n\nfunction enabled(app, file, options, argv) {\n  var template = extend({}, file.locals, file.options, file.data);\n  return isTrue(argv, 'reflinks')\n    || isTrue(template, 'reflinks')\n    || isTrue(options, 'reflinks')\n    || isTrue(app.options, 'reflinks');\n}\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/plugins/render.js":"'use strict';\n\nvar PluginError = require('plugin-error');\nvar through = require('through2');\nvar _ = require('lodash');\n\n/**\n * Expose `render` plugin\n */\n\nmodule.exports = function (locals) {\n  var app = this;\n  var opts = _.extend({showStack: true}, this.options);\n\n  locals = locals || {};\n  locals.options = locals.options || {};\n\n  return through.obj(function (file, enc, cb) {\n    if (file.isNull()) {\n      this.push(file);\n      return cb();\n    }\n\n    locals = _.merge({}, locals, file.locals);\n    locals.options = _.merge({}, app.options, locals.options);\n    file.content = file.contents.toString();\n\n    try {\n      var stream = this;\n      app.render(file, locals, function (err, content) {\n        if (err) {\n          stream.emit('error', new PluginError('render plugin', err, opts));\n          return cb();\n        }\n        file.contents = new Buffer(content);\n        stream.push(file);\n        return cb();\n      });\n    } catch (err) {\n      this.emit('error', new PluginError('render plugin', err, opts));\n      return cb();\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/init.js":"'use strict';\n\nvar init = require('./transforms/init');\nvar config = require('./transforms/config');\nvar mod = require('./transforms/modifiers');\nvar env = require('./transforms/env');\n\n/**\n * Load initialization transforms\n *\n *  | config\n *  | loaders\n *  | templates\n *  | options\n *  | middleware\n *  | plugins\n *  | load\n *  | engines\n *  | helpers - load helpers last\n */\n\nmodule.exports = function(app) {\n  app.transform('metadata', init.metadata);\n  app.transform('ignore', init.ignore);\n  app.transform('files', env.files);\n\n  app.transform('env', env.env);\n  app.transform('pkg', env.pkg);\n  app.transform('keys', env.keys);\n  app.transform('paths', env.paths);\n  app.transform('cwd', env.cwd);\n  app.transform('repo', mod.repository);\n  app.transform('author', env.author);\n  app.transform('user', env.user);\n  app.transform('username', env.username);\n  app.transform('github', env.github);\n  app.transform('travis', env.travis);\n  app.transform('fork', env.fork);\n  app.transform('missing', env.missing);\n\n  app.transform('github-url', mod.github_url);\n  app.transform('twitter-url', mod.twitter_url);\n\n  app.once('loaded', function () {\n    app.transform('defaults', init.defaults);\n    app.transform('runner', init.runner);\n    app.transform('argv', init.argv);\n    app.transform('config', config);\n    app.transform('loaders', init.loaders);\n    app.transform('create', init.templates);\n    app.transform('engines', init.engines);\n    app.transform('middleware', init.middleware);\n    app.transform('helpers', init.helpers);\n    app.transform('load', init.load);\n    app.transform('plugins', init.plugins);\n    app.emit('init');\n  });\n\n  app.once('init', function () {\n    app.transform('helpers', init.helpers);\n    app.emit('finished');\n  });\n\n  app.once('finished', function () {\n    app.transform('checkup', init.checkup);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/init/index.js":"'use strict';\n\nmodule.exports = require('export-files')(__dirname);\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/init/argv.js":"'use strict';\n\n/**\n * Prime the `verb.cache.argv` object. Used for setting values\n * that are passed from the command line.\n */\n\nmodule.exports = function(app) {\n  app.cache.argv = app.cache.argv || {};\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/init/data.js":"'use strict';\n\nvar path = require('path');\nvar utils = require('../../utils');\n\n/**\n * Prime `verb.cache.data` with empty package.json fields that\n * will be over-written by the user's environment.\n */\n\nmodule.exports = function(app) {\n  app.data('../../pkg.json', function (fp) {\n    return utils.tryRequire(path.resolve(__dirname, fp)) || {};\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/init/defaults.js":"'use strict';\n\nvar cwd = require('cwd');\n\n/**\n * Define default options.\n */\n\nmodule.exports = function(app) {\n  app.defaults('templates.examples', cwd('.'));\n  app.defaults('templates.includes', require('readme-includes'));\n  app.defaults('templates.badges', require('readme-badges'));\n  app.defaults('templates.docs', cwd('docs'));\n\n  app.option({\n    toc: {append: '\\n\\n_(Table of contents generated by [verb])_'}\n  });\n\n  // engines\n  app.option('view engine', 'md');\n\n  // routing\n  app.option('router methods');\n  app.enable('case sensitive routing');\n  app.enable('strict routing');\n\n  // delimiters\n  app.option('layoutDelims', ['<<%', '%>>']);\n  app.option('escapeDelims', ['{%%', '{%']);\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/init/engines.js":"'use strict';\n\n/**\n * Load built-in engines\n */\n\nmodule.exports = function(app) {\n  app.engine('md', require('engine-lodash'), {\n    delims: ['{%', '%}']\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/init/helpers.js":"'use strict';\n\n/**\n * Load default helpers\n */\n\nmodule.exports = function(app) {\n  require('../../helpers/sync')(app);\n  require('../../helpers/async')(app);\n  require('../../helpers/collections')(app);\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/init/load.js":"'use strict';\n\nvar utils = require('../../utils');\nvar path = require('path');\nvar cwd = require('cwd');\n\n/**\n * Pre-load templates for built-in template types:\n *   | examples\n *   | includes\n *   | badges\n *   | docs\n */\n\nmodule.exports = function(app) {\n  app.badges('**/*.md', opts(app, 'badges', 'readme-badges'));\n  app.includes('**/*.md', opts(app, 'includes', 'readme-includes'));\n  app.examples('example.js', { cwd: cwd('.'), cache: true });\n  app.docs('**/*.md', opts(app, 'docs'));\n};\n\nfunction opts(app, name) {\n  var paths = app.config.get('templates');\n  var defaults = app.option('defaults.templates');\n  var res = { cwd: process.cwd(), cache: true };\n\n  if (paths && paths.hasOwnProperty(name)) {\n    res.cwd = utils.tryRequire(paths[name]);\n    if (res.cwd) return res;\n    res.cwd = path.resolve(process.cwd(), paths[name]);\n    if (res.cwd) return res;\n  }\n\n  if (defaults.hasOwnProperty(name)) {\n    res.cwd = utils.tryRequire(defaults[name]);\n    if (res.cwd) return res;\n    res.cwd = path.resolve(process.cwd(), defaults[name]);\n  }\n  return res;\n}\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/init/loaders.js":"'use strict';\n\nvar base = require('base-loader');\nvar task = require('init-file-loader');\n\n/**\n * Load built-in loaders\n */\n\nmodule.exports = function(app) {\n  app.loader('base', [base]);\n  app.loader('task', [task]);\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/init/metadata.js":"'use strict';\n\nvar path = require('path');\n\n/**\n * Called in the `init` transform. Adds Verb's package.json\n * data to `verb.metadata`.\n *\n * @param  {Object} `app`\n */\n\nmodule.exports = function(app) {\n  Object.defineProperty(app, 'metadata', {\n    get: function () {\n      return require(path.resolve(__dirname, '../../..', 'package.json'));\n    },\n    set: function () {\n      console.log('`verb.metadata` is read-only and cannot be modified.');\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/init/middleware.js":"'use strict';\n\nvar middleware = require('../../middleware/');\nvar mu = require('middleware-utils');\n\n/**\n * Initialize default middleware\n */\n\nmodule.exports = function(app) {\n  var delims = mu.delims();\n\n  app.onLoad(/./, mu.parallel([\n      middleware.props,\n      middleware.engine,\n      middleware.src,\n      middleware.ext,\n      middleware.dest,\n      middleware.layout,\n      middleware.debug(app),\n    ]), mu.error('onLoad (js)'))\n\n    .onLoad(/\\.js$/, mu.parallel([\n      middleware.copyright(app),\n    ]), mu.error('onLoad (js)'))\n\n    .onLoad(/\\.md$/, mu.series([\n      middleware.copyright(app),\n      require('template-toc')(app),\n      middleware.examples(app),\n      delims.escape(),\n    ]), mu.error('onLoad (md)'))\n\n    .preRender(/\\.md$/, mu.parallel([\n      middleware.readme(app),\n    ]), mu.error('preRender (md)'))\n\n    .postRender(/\\.md$/, mu.parallel([\n      delims.unescape(),\n      middleware['lint-after'](app),\n      middleware.diff(app),\n    ]), mu.error('postRender'))\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/middleware/index.js":"module.exports = require('export-files')(__dirname);\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/middleware/append.js":"'use strict';\n\n/**\n * `append` post-render middleware.\n *\n * If a string is defined on `verb.cache.data.append`,\n * it will be appended to the content of every file\n * that matches the route.\n */\n\nmodule.exports = function(app) {\n  return function (file, next) {\n    file.content += app.get('data.append') || '';\n    next();\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/middleware/assets.js":"'use strict';\n\n/**\n * Module dependencies\n */\n\nvar path = require('path');\nvar compute = require('computed-property');\nvar relative = require('relative-dest');\nvar extend = require('extend-shallow');\n\n/**\n * Calculate the path from the `assets` or `public`\n * path define on the options to the destination\n * file.\n */\n\nmodule.exports = function(assemble) {\n  return function assetsPath(file, next) {\n    calculate(assemble, file, 'assets');\n    calculate(assemble, file, 'public');\n    next();\n  };\n};\n\nfunction calculate(assemble, file, target) {\n  compute(file.data, target, function () {\n    var opts = extend({}, assemble.options, file.options);\n\n    // destination directory for the file\n    var dest = path.resolve(this.dest.dirname || process.cwd());\n    target = path.resolve(dest, opts[target] || target);\n\n    // look for `opts.assets`, fallback to `./assets`\n    this.assetsPath = relative(dest, target);\n    return this.assetsPath;\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/middleware/conflict.js":"'use strict';\n\nvar _ = require('lodash');\nvar chalk = require('chalk');\nvar extend = require('extend-shallow');\nvar symbol = require('log-symbols');\n\n/**\n * Resolve conflicts between helpers and data\n * properties before rendering.\n */\n\nmodule.exports = function conflict_(app) {\n  var config = extend({}, app.options, app.get('argv'));\n\n  if (config.verbose) {\n    console.log();\n    console.log(chalk.bold.underline('Checking for conflicts…'));\n    console.log();\n  }\n\n  return function (file, next) {\n    if (config.nolint === true) {\n      return next();\n    }\n\n    var str = file.content;\n    var res = helpers(str);\n    var conflicting = problematic(app, file, res, config.verbose);\n    var h = {};\n\n    if (!conflicting.length) {\n      return next();\n    }\n\n    var ctx = {};\n    ctx.options = _.extend({}, app.options, file.options);\n    ctx.context = _.merge({}, app.cache.data, file.data, file.locals);\n    ctx.app = app;\n\n    file.locals = file.locals || {};\n    file.locals.__ = file.locals.__ || {};\n\n    // console.log('actual:', app._.helpers.sync)\n    for (var i = 0; i < conflicting.length; i++) {\n      var name = conflicting[i];\n      file.content = namespace(file.content, name);\n\n      var syncFn = function () {\n        return app._.helpers.sync[name].apply(this, arguments);\n      };\n\n      if (syncFn) {\n        h[name] = _.bind(syncFn, ctx);\n        file.locals.__[name] = _.bind(syncFn, ctx);\n        app.helpers({__: h});\n        delete app._.helpers.sync[name];\n      }\n\n      var asyncFn = app._.helpers.async[name];\n      if (asyncFn) {\n        h[name] = _.bind(asyncFn, ctx);\n        file.locals.__[name] = _.bind(asyncFn, ctx);\n        app.asyncHelpers({__: h});\n        delete app._.helpers.async[name];\n      }\n\n      if (!asyncFn && !syncFn) {\n        h[name] = noop(name);\n        file.locals.__[name] = noop(name);\n        app.helpers({__: h});\n      }\n    }\n\n    next();\n  };\n};\n\nfunction noop(name) {\n  return function () {\n    var msg = '';\n    msg += 'ERROR! Cannot find the {%= ' + name + '() %} helper. Helpers may be ';\n    msg += 'registered using `app.helper()`.';\n    // console.log(chalk.red(msg));\n  };\n}\n\nfunction namespace(str, name) {\n  return str.split('{%= ' + name).join('{%= __.' + name);\n}\n\nfunction helpers(str) {\n  var re = /\\{%=\\s*((?!__\\.)[\\w.]+)(?:\\(\\)|\\(([^)]*?)\\))\\s*%}/gm;\n  var res = [], match;\n\n  while (match = re.exec(str)) {\n    if (res.indexOf(match[1]) === -1) {\n      res.push(match[1].trim());\n    }\n  }\n  return res;\n}\n\nfunction problematic(app, file, helpers, verbose) {\n  var dataKeys = Object.keys(app.cache.data);\n  dataKeys = _.union(dataKeys, Object.keys(file.data));\n\n  var registered = Object.keys(app._.helpers.async);\n  registered = _.union(registered, Object.keys(app._.helpers.sync));\n\n  var h = [], d = [];\n  var len = helpers.length;\n\n  while (len--) {\n    var helper = helpers[len];\n    // if the helper name is also a data prop, it's a conflict\n    if (dataKeys.indexOf(helper) !== -1 && helper.indexOf('.') === -1) {\n      d.push(helper);\n    }\n\n    // if the helper is not registered, it's a conflict\n    if (registered.indexOf(helper) === -1 && helper.indexOf('.') === -1) {\n      h.push(helper);\n    }\n  }\n\n  message(h, d, verbose, file);\n  return _.union(h, d);\n}\n\n\nfunction message(h, d, verbose, file) {\n  if (!verbose) return;\n  var fp = file.path.split(/[\\\\\\/]/).slice(-2).join('/');\n\n  var hlen = h.length;\n  var dlen = d.length;\n\n  if (hlen > 0) {\n    console.log(symbol.error, '', chalk.red(hlen + ' missing helper' + s(hlen) + ' found in', fp));\n    h.forEach(function (ele) {\n      console.log('   -', ele);\n    });\n    console.log();\n  }\n\n  if (dlen > 0) {\n    console.log(symbol.warning, '', chalk.yellow(dlen + ' data/helper conflict' + s(dlen) + ' found in', fp));\n    d.forEach(function (ele) {\n      console.log('   -', ele);\n    });\n    console.log();\n  }\n}\n\nfunction s(len) {\n  return len > 1 ? 's' : '';\n}\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/middleware/copyright.js":"'use strict';\n\nvar fs = require('fs');\nvar update = require('update-copyright');\nvar parse = require('parse-copyright');\n\n/**\n * Add copyright information to the context.\n *\n * ```js\n * // get\n * console.log(verb.get('data.copyright'));\n * // or directly\n * console.log(verb.cache.data.copyright);\n * // used by the copyright helper\n * {%= copyright() %}\n * ```\n */\n\nmodule.exports = function copyright_(verb) {\n  var copyright = verb.get('data.copyright');\n  var readme = verb.files('README.md');\n  var parsed = false;\n\n  if (!parsed && !copyright && readme.length) {\n    var str = fs.readFileSync(readme[0], 'utf8');\n    var res = update(str);\n    if (res) {\n      parsed = true;\n      verb.set('data.copyright.statement', res);\n    }\n  }\n\n  return function (file, next) {\n    if (typeof copyright === 'string') return next();\n    if (typeof copyright === 'object' && Object.keys(copyright).length) {\n      return next();\n    }\n    copyright = verb.get('data.copyright') || parse(file.content)[0] || {};\n    verb.set('data.copyright', copyright);\n    file.data.copyright = copyright;\n    next();\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/middleware/debug.js":"'use strict';\n\nvar get = require('get-value');\nvar _ = require('lodash');\n\n/**\n * Convenience method for debugging.\n *\n * **Examples**\n *\n * ```js\n * {%= log(debug(\"app\")) %}\n * {%= log(debug(\"app.cache.data\")) %}\n *\n * {%= log(debug(\"file\")) %}\n * {%= log(debug(\"file.data\")) %}\n *\n * {%= log(debug()) %}\n * {%= log(debug(\"this\")) %}\n * {%= log(debug(\"this.dest\")) %}\n * ```\n * @todo move to a helper\n */\n\nmodule.exports = function (app) {\n  return function(file, next) {\n    file.data.debug = file.data.debug || {};\n\n    file.data.debug = function (prop) {\n      var segs, root, type = typeof prop;\n      if (type !== 'undefined') {\n        segs = prop.split('.');\n        root = segs.shift();\n        segs = segs.join('.');\n      }\n\n      // get the (pseudo) context\n      if (root === 'this' || root === 'context' || type === 'undefined') {\n        var ctx = app.cache.data;\n        _.merge(ctx, file.data);\n        return filter(ctx, segs);\n      }\n      // get the file object\n      if (root === 'file') {\n        return filter(file, segs);\n      }\n      // get the app\n      if (root === 'app') {\n        return filter(app, segs);\n      }\n    };\n    next();\n  };\n};\n\nfunction filter(obj, prop) {\n  var omitKeys = ['debug', '_contents', 'fn'];\n  if (typeof prop !== 'string' || prop === '') {\n    return _.omit(_.cloneDeep(obj), omitKeys);\n  }\n  return _.omit(_.cloneDeep(get(obj, prop)), omitKeys);\n}\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/middleware/dest.js":"'use strict';\n\n/**\n * Prime the `file.data.dest` object.\n */\n\nmodule.exports = function(file, next) {\n  file.data.dest = file.data.dest || {};\n  next();\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/middleware/diff.js":"'use strict';\n\nvar chalk = require('chalk');\nvar relative = require('relative');\n\n/**\n * Show a diff comparison of pre- and post-render content.\n */\n\nmodule.exports = function(app) {\n  return function (file, next) {\n    var diff = app.get('argv.diff');\n\n    if (!diff) return next();\n    console.log();\n    console.log('- end -');\n    console.log('---------------------------------------------------------------');\n    console.log(relative(file.path));\n    console.log();\n\n    if (file.content === '') {\n      console.log(chalk.gray('  no content.'));\n    } else if (file.content === file.orig) {\n      console.log(chalk.gray('  content is unchanged.'));\n    } else {\n      app.diff(file.orig, file.content, 'diffLines');\n    }\n    next();\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/middleware/engine.js":"'use strict';\n\n/**\n * Set the engine to use\n */\n\nmodule.exports = function engine_(file, next) {\n  file.options.engine = file.options.engine || file.ext || '.md';\n  next();\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/middleware/examples.js":"'use strict';\n\nvar extract = require('gfm-code-blocks');\n\n/**\n * Detect the layout to use\n */\n\nmodule.exports = function (app) {\n  return function (file, next) {\n    app.cache.data.examples = app.cache.data.examples || {};\n    var examples = {};\n\n    var str = file.content;\n    extract(str).forEach(function (block) {\n      block.orig = block.block;\n      var m = /^\\/\\/\\s*example\\.([^\\n]+)([\\s\\S]+)/.exec(block.code);\n      if (!m) return next();\n      var name = m[1];\n      examples[name] = examples[name] || [];\n      file.content = file.content.split(block.block).join('');\n      block.block = '```js\\n' + m[2] + '\\n```\\n';\n      examples[name].push(block);\n    });\n\n    app.cache.data.examples = examples;\n    next();\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/middleware/ext.js":"'use strict';\n\nvar path = require('path');\nvar utils = require('../utils');\n\n/**\n * Ensure that `ext` is on the file object.\n */\n\nmodule.exports = function(file, next) {\n  if (!file.hasOwnProperty('data')) {\n    throw new Error('ext middleware: file object should have a `data` property.');\n  }\n\n  if (!file.data.hasOwnProperty('src')) {\n    throw new Error('ext middleware: file.data object should have a `src` property.');\n  }\n\n  file.ext = file.ext ? utils.formatExt(file.ext) : (file.data.src.ext || path.extname(file.path));\n  next();\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/middleware/layout.js":"'use strict';\n\n/**\n * Detect the layout to use\n */\n\nmodule.exports = function(file, next) {\n  file.layout = file.layout\n    || file.data.layout\n    || file.locals.layout\n    || file.options.layout;\n  next();\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/middleware/lint-after.js":"'use strict';\n\nvar extend = require('extend-shallow');\n\n/**\n * Lints post-render content to find potential errors\n * or incorrect content.\n */\n\nmodule.exports = function(app) {\n  var config = extend({}, app.options, app.get('argv'));\n  var diff = config.diff;\n  var lint = config.lint;\n\n  return function (file, next) {\n    if (!lint) return next();\n    var str = file.content, error = {};\n\n    if (/\\[object Object\\]/.test(str)) {\n      // only show the last one or two path segments\n      error.path = file.path.split(/[\\\\\\/]/).slice(-2).join('/');\n      error.message = '`[object Object]`';\n      error.content = str;\n\n      if (diff) {\n        app.diff(str, file.orig);\n      }\n      app.union('messages.errors', error);\n    }\n    next();\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/middleware/lint.js":"'use strict';\n\n/**\n * Resolve conflicts between helpers and data\n * properties before rendering.\n */\n\nvar lint = require('lint-templates');\n\nmodule.exports = function(app) {\n  return function (file, next) {\n    lint(app, file);\n    next();\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/middleware/matter.js":"'use strict';\n\nvar parser = require('parser-front-matter');\nvar extend = require('extend-shallow');\n\n/**\n * Default middleware for parsing front-matter\n */\n\nmodule.exports = function (app) {\n  return function (file, next) {\n    var opts = extend({}, file.options, app.option('matter'));\n    parser.parse(file, opts, function (err) {\n      if (err) return next(err);\n      next();\n    });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/middleware/multi-toc.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar glob = require('globby');\nvar relative = require('relative');\nvar toc = require('markdown-toc');\nvar mdu = require('markdown-utils');\n\n/**\n * Generate a Table of Contents for a glob of files.\n */\n\nmodule.exports = function multitoc_(file, next) {\n  var str = file.content;\n  var i = str.indexOf('<!-- toc(');\n\n  if (i === -1) return next();\n\n  var tag = str.slice(i, str.indexOf('-->') + 3);\n  var pattern = strip(tag);\n\n  var args = toArgs(pattern);\n  var files = [];\n\n  if (args.length && args[1]) {\n    var opts = args[1] || {};\n    files = glob.sync(args[0], opts).map(function (fp) {\n      return path.join(opts.cwd || process.cwd(), fp);\n    });\n  } else {\n    files = glob.sync(args[0]);\n  }\n\n  if (!files.length) return next();\n  var res = files.map(generate).join('\\n');\n  file.content = str.split(tag).join(res);\n  next();\n};\n\nfunction generate(fp, options) {\n  options = options || {};\n  fp = path.join(options.cwd || process.cwd(), fp);\n  var str = fs.readFileSync(fp, 'utf8');\n  var first = str.split('\\n')[0].trim().slice(2).trim();\n\n  // don't generate a TOC for a template\n  if (/\\{%=/.test(first)) return '';\n  var res = '';\n\n  res += mdu.h2(mdu.link(first, relative(fp)));\n  res += '__AFTER__';\n  res += '\\n';\n\n  var table = toc(str, {\n    linkify: function(tok, heading) {\n      var url = relative(fp);\n      url += '/#';\n      url += toc.slugify(heading);\n      tok.content = mdu.link(tok.content, url);\n      return tok;\n    }\n  });\n\n  res += table.content;\n  res += '\\n';\n\n  res = res.split(/\\n{2,}/).join('\\n');\n  res = res.split('__AFTER__').join('\\n');\n  return res;\n}\n\nfunction strip(str) {\n  str = str.replace(/<!--\\s*toc\\(/, '');\n  str = str.replace(/\\)\\s*-->/, '');\n  return str.trim();\n}\n\nfunction toArgs(pattern) {\n  var args = pattern.split(',').filter(Boolean);\n  args[0] = args[0].trim().replace(/^['\"]|['\"]$/g, '');\n  args[1] = args[1] ? JSON.parse(args[1].trim()) : null;\n  return args;\n}\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/middleware/props.js":"'use strict';\n\n/**\n * Prime the `file` object with properties that\n * can be extended in plugins.\n */\n\nmodule.exports = function props_(file, next) {\n  file.options = file.options || {};\n  file.locals = file.locals || {};\n  file.data = file.data || {};\n  next();\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/middleware/readme.js":"'use strict';\n\n/**\n * Set the dest path to `README.md` for `.verb.md` templates\n */\n\nmodule.exports = function(app) {\n  return function(file, next) {\n    if (app.isFalse('readme') || app.isTrue('noreadme')) {\n      return next();\n    }\n\n    if (file.readme === false || file.noreadme === true) {\n      return next();\n    }\n\n    if (/\\.(?:verb(rc)?|readme)\\.md$/i.test(file.path)) {\n      file.path = 'README.md';\n    }\n    next();\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/middleware/src.js":"'use strict';\n\nvar parse = require('parse-filepath');\nvar path = require('path');\n\n/**\n * Set properties on `file.data.src` to use in plugins,\n * other middleware, helpers, templates etc.\n */\n\nmodule.exports = function(file, next) {\n  var orig = file.options.originalPath;\n\n  file.data.src = file.data.src || {};\n  file.data.src.path = orig;\n\n  // look for native `path.parse` method first\n  var parsed = typeof path.parse === 'function'\n    ? path.parse(orig)\n    : parse(orig);\n\n  file.data.src.dirname = parsed.dir;\n  file.data.src.filename = parsed.name;\n  file.data.src.basename = parsed.base;\n  file.data.src.extname = parsed.ext;\n  file.data.src.ext = parsed.ext;\n\n  file.data.process = {};\n  file.data.process.cwd = function () {\n    return process.cwd();\n  };\n\n  file.data.resolve = path.resolve;\n  next();\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/init/plugins.js":"'use strict';\n\n/**\n * Load default settings\n */\n\nmodule.exports = function(app) {\n  // default `src` plugins\n  app.enable('src:vfs plugin');\n  app.enable('src:init plugin');\n  app.enable('src:conflicts plugin');\n  app.enable('src:lint plugin');\n  app.enable('src:drafts plugin');\n\n  // default `dest` plugins\n  app.enable('dest:todos plugin');\n  app.enable('dest:paths plugin');\n  app.enable('dest:render plugin');\n  app.enable('dest:reflinks plugin');\n  app.enable('dest:comments plugin');\n  app.enable('dest:format plugin');\n  app.enable('dest:vfs plugin');\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/init/runner.js":"'use strict';\n\n/**\n * Adds data to the context for the current `verb.runner`.\n */\n\nmodule.exports = function(app) {\n  app.data({\n    runner: {\n      name: 'verb-cli',\n      url: 'https://github.com/assemble/verb-cli'\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/init/templates.js":"'use strict';\n\n/**\n * Create built-in template types, using the `base` loader\n */\n\nmodule.exports = function(app) {\n  app.create('example', {isRenderable: true}, ['base']);\n  app.create('include', {isRenderable: true}, ['base']);\n  app.create('badge', {isRenderable: true}, ['base']);\n  app.create('doc', {isRenderable: true}, ['base']);\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/config/index.js":"'use strict';\n\nvar Config = require('data-store');\nvar config = require('export-files')(__dirname);\n\n/**\n * Initialize a global config store, for persisting data\n * that may be reused across projects.\n *\n * Initialized in the `init` transform.\n */\n\nmodule.exports = function(verb) {\n  verb.config = new Config('verb');\n\n  verb.transform('set', config.set);\n  verb.transform('get', config.get);\n  verb.transform('del', config.del);\n  verb.transform('option', config.option);\n  verb.transform('union', config.union);\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/config/del.js":"'use strict';\n\nvar mm = require('micromatch');\nvar bold = require('ansi-bold');\n\n/**\n * Delete a value from the config store.\n *\n * ```sh\n * $ --del foo\n *\n * # delete multiple values\n * $ --del foo,bar,baz\n * ```\n */\n\nmodule.exports = function(app) {\n  var del = app.get('argv.del');\n  var config = app.config;\n  var keys = mm(Object.keys(config.data), del);\n\n  if (keys.length) {\n    config.omit.apply(config, keys);\n    console.log('deleted:', bold(keys.join(', ')));\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/config/get.js":"'use strict';\n\nvar bold = require('ansi-bold');\nvar cyan = require('ansi-cyan');\n\n/**\n * Get a value from the config store.\n *\n * ```sh\n * $ --get one\n * # or\n * $ --get one,two,three\n * ```\n */\n\nmodule.exports = function(app) {\n  var config = app.config;\n  var get = app.get('argv.get');\n\n  if (get) {\n    if (get === true || get === 'true') {\n      console.log(cyan('config config:'), stringify(config.data));\n    } else if (get.indexOf(',') !== -1) {\n      get.split(',').forEach(function (val) {\n        console.log(val, '=', stringify(config.get(val)));\n      });\n    } else {\n      console.log(get, '=', stringify(config.get(get)));\n    }\n  }\n};\n\nfunction stringify(val) {\n  return bold(JSON.stringify(val));\n}\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/config/option.js":"'use strict';\n\n/**\n * Persist a value on the config store.\n *\n * ```sh\n * $ --option one=abc\n * #=> {one: 'abc'}\n *\n * $ --option one\n * #=> {one: true}\n * ```\n */\n\nmodule.exports = function(app) {\n  var config = app.config;\n  var args;\n\n  var option = app.get('argv.option');\n  if (option) {\n    args = option.split('=');\n    if (args.length === 2) {\n      config.set(args[0], args[1]);\n    } else {\n      config.set(args[0], true);\n    }\n  }\n\n  var enable = app.get('argv.enable');\n  if (enable) {\n    config.set(enable, true);\n  }\n\n  var disable = app.get('argv.disable');\n  if (disable) {\n    config.set(disable, false);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/config/set.js":"'use strict';\n\n/**\n * Persist a value on the config store.\n *\n * ```sh\n * $ --set one=abc\n * #=> {one: 'abc'}\n *\n * $ --set one\n * #=> {one: true}\n * ```\n */\n\nmodule.exports = function(app) {\n  var config = app.config;\n  var args;\n\n  var set = app.get('argv.set');\n  if (set) {\n    args = set.split('=');\n    if (args.length === 2) {\n      config.set(args[0], args[1]);\n    } else {\n      config.set(args[0], true);\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/config/union.js":"'use strict';\n\nvar union = require('arr-union');\n\n/**\n * Get a value from the config store.\n *\n * ```sh\n * $ --union one=a,b,c\n * #=> {one: ['a', 'b', 'c']}\n *\n * $ --union one=d\n * #=> {one: ['a', 'b', 'c', 'd']}\n * ```\n */\n\nmodule.exports = function(app) {\n  var arr = app.get('argv.union');\n  var config = app.config;\n  var args;\n\n  if (arr) {\n    args = arr.split('=');\n    if (args.length > 1) {\n      var val = config.get(args[1]);\n      args[2] = args[2].split(',');\n      config.set(args[1], union(val, args[2]));\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/modifiers/index.js":"'use strict';\n\nmodule.exports = require('export-files')(__dirname);\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/modifiers/github_url.js":"'use strict';\n\n/**\n * Modifier to add a github URl if a github username\n * exists on the context.\n */\n\nmodule.exports = function github_(verb) {\n  var username = verb.get('data.github.username');\n  if (username) {\n    verb.set('data.github.url', 'https://github/' + username);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/modifiers/repository.js":"'use strict';\n\n/**\n * Called in the `init` transform. Normalizes the\n * `repository` field.\n */\n\nmodule.exports = function(app) {\n  var repo = app.get('data.repository');\n  if (typeof repo === 'string') {\n    repo = 'git://github.com/' + repo + '.git';\n    app.data({repository: {url: repo}});\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/modifiers/twitter_url.js":"'use strict';\n\n/**\n * Modifier to add a twitter URl if a twitter username\n * exists on the context.\n */\n\nmodule.exports = function twitter_(verb) {\n  var username = verb.get('data.twitter.username');\n  if (username) {\n    verb.set('data.twitter.url', 'http://twitter/' + username);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/env/index.js":"'use strict';\n\nmodule.exports = require('export-files')(__dirname);\n\n/**\n * Load the project environment. Starting with\n * package.json and .gitignore.\n */\n\n// module.exports = function(app) {\n//   app.transform('env env', env.env);\n//   app.transform('env ignore', env.ignore);\n//   app.transform('env files', env.files);\n//   app.transform('env keys', env.keys);\n//   app.transform('env github', env.github);\n//   app.transform('env travis', env.travis);\n//   app.transform('env user', env.user);\n//   app.transform('env author', env.author);\n//   app.transform('env username', env.username);\n//   app.transform('env license', env.license);\n//   app.transform('env licenses', env.licenses);\n// };\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/env/author.js":"'use strict';\n\nvar isPlainObject = require('is-plain-object');\nvar author = require('parse-author');\n\n/**\n * Called in the `init` transform. Adds an `author`\n * property to the context, or normalizes the existing one.\n */\n\nmodule.exports = function(app) {\n  var res = app.get('data.author');\n  if (isPlainObject(res)) return;\n\n  if (typeof res === 'string') {\n    app.data({author: author(res)});\n  } else {\n    app.data({author: {}});\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/env/cwd.js":"'use strict';\n\n/**\n * Get/set the current working directory\n *\n * ```js\n * console.log(verb.cwd);\n * //=> /dev/foo/bar/\n * ```\n * Or set:\n *\n * ```js\n * verb.cwd = 'foo';\n * ```\n */\n\nmodule.exports = function(app) {\n  var cwd = app.option('cwd') || process.cwd();\n\n  Object.defineProperty(app, 'cwd', {\n    configurable: true,\n    get: function () {\n      return cwd;\n    },\n    set: function (val) {\n      cwd = val;\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/env/env.js":"'use strict';\n\nvar path = require('path');\nvar merge = require('lodash')._.merge;\n\n/**\n * Getter for getting stored values from `verb.env`, a read-only\n * object that stores the project's package.json before it's modified.\n *\n * ```js\n * console.log(verb.env.name);\n * //=> 'my-project'\n * ```\n *\n * @return {*} The value of specified property.\n * @api public\n */\n\nmodule.exports = function(app) {\n  var env = app.env || app.option('env') || require(path.resolve('package.json'));\n  merge(env, (env.verb && env.verb.data) || {});\n\n  Object.defineProperty(app, 'env', {\n    get: function () {\n      return env;\n    },\n    set: function () {\n      console.log('verb.env is read-only and cannot be modified.');\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/env/files.js":"'use strict';\n\nvar mm = require('micromatch');\nvar glob = require('globby');\n\n/**\n * Loads files from the root of the current project.\n * Returns matching function bound to the list of files.\n *\n * ```js\n * console.log(verb.files('*.js'));\n * //=> ['foo.js', 'bar.js']\n * ```\n */\n\nmodule.exports = function(verb) {\n  var patterns = ['*', 'lib/*', 'test/*'];\n  var files = glob.sync(patterns, {dot: true});\n\n  verb.files = function (pattern, options) {\n    return mm(files, pattern, options);\n  };\n\n  verb.fileExists = function (pattern, options) {\n    var res = verb.files(pattern, options);\n    return !!(res && res.length);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/env/fork.js":"'use strict';\n\n/**\n * Adds a `fork` URL to the context\n */\n\nmodule.exports = function(app) {\n  var repo = app.get('data.repository');\n  if (! repo) {\n    return;\n  }\n  var url = repo.url.replace(/\\.git$/, '');\n  url = url.replace(/git:\\/\\//, 'https://');\n  app.data({fork: url + '/fork'});\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/env/git.js":"'use strict';\n\nvar username = require('git-user-name');\n\n/**\n * Called in the `username` transform, if a `username`\n * cannot be determined from easier means, this attempts\n * to get the `user.name` from global `.git config`\n */\n\nmodule.exports = function(verb) {\n  if (!verb.get('data.git.username')) {\n    verb.set('data.git.username', username());\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/env/github.js":"'use strict';\n\nvar parse = require('parse-github-url');\n\n/**\n * Called in the `init` transform. Adds a `github`\n * property to the context.\n *\n * @param  {Object} `verb`\n */\n\nmodule.exports = function(verb) {\n  var repo = verb.get('data.repository');\n  var url = (repo && typeof repo === 'object')\n    ? repo.url\n    : repo;\n\n  var github = parse(url);\n  if (github && Object.keys(github).length) {\n    verb.data({github: github});\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/env/ignore.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar parse = require('parse-gitignore');\nvar union = require('lodash')._.union;\nvar utils = require('../../utils');\n\n/**\n * Read `.gitignore` and add patterns to\n * `options.ignore`\n */\n\nmodule.exports = function(verb) {\n  if (typeof verb.cache.data.ignore === 'undefined') {\n    var ignore = union(verb.option('ignore'), verb.env.ignore);\n    verb.data({ignore: gitignore(verb.cwd, '.gitignore', ignore)});\n  }\n};\n\n/**\n * Parse the local `.gitignore` file and add\n * the resulting ignore patterns.\n */\n\nfunction gitignore(cwd, fp, arr) {\n  fp = path.resolve(cwd, fp);\n  if (!fs.existsSync(fp)) {\n    return utils.defaultIgnores;\n  }\n  var str = fs.readFileSync(fp, 'utf8');\n  return parse(str, arr);\n}\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/env/keys.js":"'use strict';\n\n/**\n * Adds `Object.keys()` to `verb.cache.data`. Can be used\n * for conflict resolution between helpers and context properties.\n */\n\nmodule.exports = function(verb) {\n  if (!verb.cache.data.hasOwnProperty('keys')) {\n    verb.cache.data.keys = Object.keys(verb.env);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/env/missing.js":"'use strict';\n\n/**\n * Called in the `init` transform to ensure that certain\n * fields are on the context.\n *\n * @param  {Object} `verb`\n */\n\nmodule.exports = function(verb) {\n  verb.cache.missing = verb.cache.missing || {};\n\n  if (!verb.cache.data.hasOwnProperty('licenses')) {\n    verb.union('messages.missing.data', ['licenses']);\n  }\n\n  if (!verb.cache.data.hasOwnProperty('license')) {\n    verb.union('messages.missing.data', ['license']);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/env/paths.js":"'use strict';\n\n/**\n * Prime the `verb.paths` object.\n */\n\nmodule.exports = function(app) {\n  app.cache.paths = app.cache.paths || {};\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/env/pkg.js":"'use strict';\n\nvar utils = require('../../utils');\nvar cache = {};\n\n/**\n * Called in the `init` transform. A read-only copy of this data is also\n * stored on `verb.env`\n *\n * @param  {Object} `verb`\n */\n\nmodule.exports = function(verb) {\n  var filename = verb.option('config') || 'package.json';\n\n  verb.data(filename, function (fp) {\n    return cache[fp] || (cache[fp] = utils.tryRequire(fp) || {});\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/env/templates.js":"'use strict';\n\nvar path = require('path');\n\n/**\n * Get/set the current working directory\n *\n * ```js\n * console.log(verb.templates);\n * //=> /dev/foo/bar/\n * ```\n * Or set:\n *\n * ```js\n * verb.templates = 'foo';\n * ```\n */\n\nmodule.exports = function(app) {\n  var dir = app.option('templates');\n  if (typeof dir === 'undefined') {\n    dir = path.join(process.cwd(), 'templates');\n  }\n  app.set('paths.templates');\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/env/travis.js":"'use strict';\n\nvar stringify = require('stringify-travis-url');\n\n/**\n * Called in the `init` transform. Adds a `travis_url`\n * property to the context.\n */\n\nmodule.exports = function(app) {\n  var github = app.get('data.github');\n  if (! github) {\n    return;\n  }\n  var travis = stringify(github.user, github.repo);\n  app.set('data.travis_url', travis);\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/env/user.js":"'use strict';\n\n/**\n * Called in the `init` transform. Adds `user` and `username`\n * for the current project to the context.\n */\n\nmodule.exports = function(app) {\n  app.set('data.username', app.get('data.github.username'));\n};\n","/home/travis/build/npmtest/node-npmtest-verb/node_modules/verb/lib/transforms/env/username.js":"'use strict';\n\nvar github = require('parse-github-url');\n\n/**\n * Called in the `username` transform, if the `git` transform\n * was not able to find anything, this attempts to generate a\n * username from other fields.\n */\n\nmodule.exports = function(app) {\n  if (!app.get('data.github.username')) {\n    var author = app.get('data.author');\n    if (typeof author.url === 'string' && /\\/github/.test(author.url)) {\n      var parsed = github(author.url);\n      var user = (parsed && parsed.user) || '';\n      app.set('data.github.username', user);\n      app.set('data.username', user);\n    }\n  }\n};\n"}